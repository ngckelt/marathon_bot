import aioschedule
from asyncio import sleep

import asyncio
from aiogram.utils.exceptions import ChatNotFound
from utils.db_api.db import MarathonMembersModel, TimestampsModel, \
    ModeratorsModel, OutOfMarathonUsersModel, FunnelUsersModel
from loader import bot
from datetime import datetime

from utils.timestamps_manage.utils import *

from keyboards.inline.moderators import update_marathon_member_statistic_markup
import time

CONTINUE_FUNNEL_AFTER_HALF_AN_HOUR = "üëã –ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –Ω–∞—à–µ –æ–±—â–µ–Ω–∏–µ - –Ω–∞–∂–º–∏ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫. " \
                                     "–í–æ–∑–º–æ–∂–Ω–æ —Ç—ã —Å–µ–π—á–∞—Å –∑–∞–Ω—è—Ç. –ö–∞–∫ –æ—Å–≤–æ–±–æ–¥–∏—à—å—Å—è, –¥–∞–≤–∞–π –ø—Ä–æ–¥–æ–ª–∂–∏–º ü§ó. " \
                                     "–ò —É–∂–µ —Å–µ–≥–æ–¥–Ω—è —Ç—ã —Å–º–æ–∂–µ—à—å –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—Å—è —Å –º–µ–Ω—Ç–æ—Ä–æ–º –∏ –≤—Å—Ç—É–ø–∏—Ç—å –≤ —á–∞—Ç, " \
                                     "–≥–¥–µ –ø–æ–ø—Ä–æ–±—É–µ—à—å –ø–µ—Ä–≤—ã–µ 3 –¥–Ω—è —á–µ–ª–ª–µ–Ω–¥–∂–∞! üëç"

CONTINUE_FUNNEL_AFTER_DAY = "–ü—Ä–∏–≤–µ—Ç! üëã –ú—ã —Å —Ç–æ–±–æ–π –≤—á–µ—Ä–∞ –Ω–µ –∑–∞–∫–æ–Ω—á–∏–ª–∏ –æ–±—â–µ–Ω–∏–µ. –ü—Ä–µ–¥–ª–∞–≥–∞—é –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—Å—è " \
                            "–ø–æ–±–ª–∏–∂–µ! " \
                            "–ò —É–∂–µ —Å–µ–≥–æ–¥–Ω—è —Ç—ã —Å–º–æ–∂–µ—à—å –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—Å—è —Å –º–µ–Ω—Ç–æ—Ä–æ–º –∏ –≤—Å—Ç—É–ø–∏—Ç—å –≤ —á–∞—Ç, " \
                            "–≥–¥–µ –ø–æ–ø—Ä–æ–±—É–µ—à—å –ø–µ—Ä–≤—ã–µ 3 –¥–Ω—è —á–µ–ª–ª–µ–Ω–¥–∂–∞! üëç"

CONTINUE_REGISTRATION_AFTER_HALF_AN_HOUR = "–¢—ã —Ç–∞–∫ –∏ –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª üëã. –í–æ–∑–º–æ–∂–Ω–æ —Ç—ã —Å–µ–π—á–∞—Å –∑–∞–Ω—è—Ç. –Ø –ø–æ–¥–æ–∂–¥—É. –ö–∞–∫ –±—É–¥–µ—à—å " \
                                           "–≥–æ—Ç–æ–≤ - –¥–∞–≤–∞–π –∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è! –ò –ø–æ—Å–ª–µ —ç—Ç–æ–≥–æ —Ç–µ–±–µ –ø—Ä–∏–¥—ë—Ç —Å—Å—ã–ª–∫–∞ –Ω–∞ —á–µ–ª–ª–µ–Ω–¥–∂ " \
                                           "–∏ —Å —Ç–æ–±–æ–π —Å–≤—è–∂–µ—Ç—Å—è –º–µ–Ω—Ç–æ—Ä"

CONTINUE_REGISTRATION_AFTER_DAY = "–ü—Ä–∏–≤–µ—Ç! –ú—ã —Ç–∞–∫ –∏ –Ω–µ –¥–æ–∂–¥–∞–ª–∏—Å—å —Ç–≤–æ–µ–≥–æ –æ—Ç–≤–µ—Ç–∞ üôÅ." \
                                  "–ù–∞–ø–æ–º–∏–Ω–∞–µ–º –æ —Å–µ–±–µ. –¢—ã –≤—Å—ë –µ—â—ë —Ö–æ—á–µ—à—å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ —á–µ–ª–ª–µ–Ω–¥–∂—É –∏ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å " \
                                  "3 –¥–Ω—è –≤ –∫—Ä—É–≥—É –µ–¥–∏–Ω–æ–º—ã—à–ª–µ–Ω–Ω–∏–∫–æ–≤ –≤—Å—Ç–∞–≤–∞—Ç—å –≤ 5-6 —É—Ç—Ä–∞? " \
                                  "–ï—Å–ª–∏ –¥–∞ - —Ç–æ –¥–∞–≤–∞–π —Å–∫–æ—Ä–µ–µ –∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è!" \
                                  "–ù–∞–ø–∏—à–∏ —Å–≤–æ–µ –ò–º—è –∏ –§–∞–º–∏–ª–∏—é üëã."


async def remind_user(funnel_user, message):
    try:
        await bot.send_message(
            chat_id=funnel_user.telegram_id,
            text=message
        )
    except Exception as e:
        print(e, e.__dict__)


async def check_funnel_users():
    current_time = time.time()
    funnel_users = await FunnelUsersModel.get_funnel_users_by_filters(
        on_marathon_registration=False,
        started_marathon=False
    )
    for user in funnel_users:
        # –ï—Å–ª–∏ –ø—Ä–æ—Ä—É—Å—Ç–∏–ª —Å—É—Ç–∫–∏
        if int(current_time - user.last_update_time) in range(DAY_IN_SEC - MIN_IN_SEC // 2, DAY_IN_SEC +
                                                                                            MIN_IN_SEC // 2):
            await remind_user(user, CONTINUE_FUNNEL_AFTER_DAY)

        # –ï—Å–ª–∏ –º–æ–ª—á–∏—Ç 30 –º–∏–Ω—É—Ç
        elif int(current_time - user.last_update_time) in range(HALF_AN_HOUR_IN_SEC - MIN_IN_SEC // 2,
                                                                HALF_AN_HOUR_IN_SEC + MIN_IN_SEC // 2):
            await remind_user(user, CONTINUE_FUNNEL_AFTER_HALF_AN_HOUR)


async def check_on_registration_funnel_users():
    current_time = time.time()
    funnel_users = await FunnelUsersModel.get_funnel_users_by_filters(
        on_marathon_registration=True,
        started_marathon=False
    )
    for user in funnel_users:
        # –ï—Å–ª–∏ –ø—Ä–æ—Ä—É—Å—Ç–∏–ª —Å—É—Ç–∫–∏
        if int(current_time - user.last_update_time) in range(DAY_IN_SEC - MIN_IN_SEC // 2, DAY_IN_SEC +
                                                                                            MIN_IN_SEC // 2):
            await remind_user(user, CONTINUE_REGISTRATION_AFTER_DAY)

        # –ï—Å–ª–∏ –º–æ–ª—á–∏—Ç 30 –º–∏–Ω—É—Ç
        elif int(current_time - user.last_update_time) in range(HALF_AN_HOUR_IN_SEC - MIN_IN_SEC // 2,
                                                                HALF_AN_HOUR_IN_SEC + MIN_IN_SEC // 2):
            await remind_user(user, CONTINUE_REGISTRATION_AFTER_HALF_AN_HOUR)
