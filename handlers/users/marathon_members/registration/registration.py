from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.builtin import CommandStart
from loader import dp

from states.registration.registration import RegisterMarathonMember
from keyboards.inline.wakeup_time_markup import wakeup_time_markup, wakeup_time_callback

from utils.db_api.db import MarathonMembersModel
from handlers.users.utils.registration_utils import correct_msk_timedelta, only_cyrillic


# @dp.message_handler(CommandStart())
# async def start_registration(message: types.Message):
#     await message.answer("–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º üëã\n–ö–∞–∫ –í–∞—Å –∑–æ–≤—É—Ç?")
#     await RegisterMarathonMember.get_name.set()


@dp.message_handler(state=RegisterMarathonMember.get_name)
async def get_name(message: types.Message, state: FSMContext):
    name = message.text
    if only_cyrillic(name):
        await state.update_data(name=name)
        await message.answer(
            text="–í—ã–±–µ—Ä–∏—Ç–µ –∂–µ–ª–∞–µ–º–æ–µ –≤—Ä–µ–º—è –ø–æ–¥—ä–µ–º–∞",
            reply_markup=wakeup_time_markup()
        )
        await RegisterMarathonMember.get_wakeup_time.set()
    else:
        await message.answer("–ò–º—è –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –∫–∏—Ä–∏–ª–ª–∏—Ü—É")


@dp.callback_query_handler(wakeup_time_callback.filter(), state=RegisterMarathonMember.get_wakeup_time)
async def get_wakeup_time(callback: types.CallbackQuery, callback_data: dict, state: FSMContext):
    await callback.answer()
    wakeup_time = callback_data.get('wakeup_time')
    await state.update_data(wakeup_time=wakeup_time)
    await callback.message.answer(
        "–£–∫–∞–∂–∏—Ç–µ —Ä–∞–∑–Ω–∏—Ü—É –≤–æ –≤—Ä–º–µ–Ω–∏ —Å –º–æ—Å–∫–≤–æ–π:\n\n"
        "- –µ—Å–ª–∏ –í–∞—à–µ –≤—Ä–µ–º—è <b>–æ–ø–µ—Ä–µ–∂–∞–µ—Ç</b> –º–æ—Å–∫–æ–≤—Å–∫–æ–µ –Ω–∞ <b>2 —á–∞—Å–∞</b>, —É–∫–∞–∂–∏—Ç–µ <b>2</b>\n\n"
        "- –µ—Å–ª–∏ –í–∞—à–µ –≤—Ä–µ–º—è <b>–æ—Ç—Å—Ç–∞–µ—Ç</b> –æ—Ç –ú–æ—Å–∫–æ–≤—Å–∫–æ–≥–æ –Ω–∞ <b>3 —á–∞—Å–∞</b>, "
        "—É–∫–∞–∂–∏—Ç–µ <b>-3</b>\n\n"
        "- –µ—Å–ª–∏ –í–∞—à–µ –≤—Ä–µ–º—è <b>—Ä–∞–≤–Ω–æ</b> –º–æ—Å–∫–æ–≤—Å–∫–æ–º—É, —É–∫–∞–∂–∏—Ç–µ <b>0</b>"
    )
    await RegisterMarathonMember.get_msk_timedelta.set()


@dp.message_handler(state=RegisterMarathonMember.get_msk_timedelta)
async def get_msk_timedelta(message: types.Message, state: FSMContext):
    msk_timedelta = message.text
    if correct_msk_timedelta(msk_timedelta):
        state_data = await state.get_data()
        await MarathonMembersModel.add_marathon_member(
            telegram_id=message.from_user.id,
            username=message.from_user.username,
            msk_timedelta=msk_timedelta,
            name=state_data.get('name').capitalize(),
            wakeup_time=state_data.get('wakeup_time')
        )

        await message.answer("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –° –∑–∞–≤—Ç—Ä–∞—à–Ω–µ–≥–æ –¥–Ω—è –í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –±—É–¥–µ—Ç –ø—Ä–∏—Å—ã–ª–∞—Ç—å –æ—Ç—á–µ—Ç—ã")
        await state.finish()
    else:
        await message.answer("–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω —Ä–∞–∑–Ω–∏—Ü—ã –≤–æ –≤—Ä–µ–º–µ–Ω–∏")



